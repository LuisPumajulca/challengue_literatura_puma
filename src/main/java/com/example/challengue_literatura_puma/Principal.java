package com.example.challengue_literatura_puma;

import com.example.challengue_literatura_puma.model.*;
import com.example.challengue_literatura_puma.repository.IAutoresRepository;
import com.example.challengue_literatura_puma.service.ConsumoAPI;
import com.example.challengue_literatura_puma.service.ConvierteDatos;


import java.util.IntSummaryStatistics;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Principal {
    private Scanner teclado = new Scanner(System.in);
    private static final String URL_BASE = "https://gutendex.com/books/";
    private ConsumoAPI consumoAPI = new ConsumoAPI();
    private ConvierteDatos convierteDatos = new ConvierteDatos();
    private IAutoresRepository repository;

    public Principal(IAutoresRepository repository) {
        this.repository = repository;
    }


    public void mostrarMenu() {
        var opcion = -1;
        while (opcion != 0) {
            var menu = """
                    --------------------------------------------
                                 üìë MENU PRINCIPAL üìë
                    --------------------------------------------
                    1 - Buscar Libro por Titulo
                    2 - Buscar Autor por Nombre
                    3 - Listar Libros Registrados
                    4 - Listar Autores Registrados
                    5 - Listar Autores Vivos
                    6 - Listar Libros por Idioma
                    7 - Listar Autores por a√±o
                    8 - Top 10 Libros mas buscados
                    9 - Generar Estadisticas
                         
                    0 - Salir
                    """;
            System.out.println(menu);
            opcion = teclado.nextInt();
            teclado.nextLine();

            switch (opcion) {
                case 1:
                    buscarLibroPorTitulo();
                    break;
                case 2:
                    buscarAutorPorNombre();
                    break;
                case 3:
                    listarLibrosRegistrados();
                    break;
                case 4:
                    listarAutoresRegistrados();
                    break;
                case 5:
                    listarAutoresVivos();
                    break;
                case 6:
                    listarLibrosPorIdioma();
                    break;
                case 7:
                    listarAutoresPorAnio();
                    break;
                case 8:
                    top10Libros();
                    break;
                case 9:
                    generarEstadisticas();
                    break;
                case 0:
                    System.out.println("Cerrando Aplicaci√≥n...");
                    break;
                default:
                    System.out.println("Opci√≥n Invalida!, intente nuevamente");
            }
        }
    }


    private void buscarLibroPorTitulo() {
        System.out.println("""
            ---------------------------------------
             üîç B√öSQUEDA DE LIBRO POR T√çTULO üîç
            ---------------------------------------
            Ingrese el nombre del libro que desea buscar:
            """);
        var nombre = teclado.nextLine();
        var json = consumoAPI.obtenerDatos(URL_BASE + "?search=" + nombre.replace(" ", "+").toLowerCase());

        if (!json.isEmpty() && !json.contains("\"count\":0,\"next\":null,\"previous\":null,\"results\":[]")) {
            var datos = convierteDatos.obtenerDatos(json, Datos.class);
            Optional<DatosLibro> libroBuscado = datos.libros().stream().findFirst();

            if (libroBuscado.isPresent()) {
                mostrarInformacionLibro(libroBuscado.get());

                try {
                    manejarLibroEncontrado(libroBuscado.get(), nombre);
                } catch (Exception e) {
                    System.out.println("Advertencia! " + e.getMessage());
                }
            } else {
                System.out.println("Libro no encontrado!");
            }
        }
    }

    private void mostrarInformacionLibro(DatosLibro libro) {
        String autores = libro.autores().stream()
                .map(DatosAutores::nombre)
                .collect(Collectors.joining(", "));
        System.out.println("""
            -------------------------------
            üìö Libro Encontrado üìö
            -------------------------------
            T√≠tulo: %s
            Autor(es): %s
            Descargas: %d
            """.formatted(libro.titulo(), autores, libro.descargas()));
    }

    private void manejarLibroEncontrado(DatosLibro libroBuscado, String nombre) {
        List<Libro> libroEncontrado = List.of(new Libro(libroBuscado));
        DatosAutores autorAPI = libroBuscado.autores().stream()
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("No se encontr√≥ el autor en el API."));

        Optional<Autores> autorBD = repository.buscarAutorPorNombre(autorAPI.nombre());
        Optional<Libro> libroOptional = repository.buscarLibroPorNombre(nombre);

        if (libroOptional.isPresent()) {
            System.out.println("Libro ya guardado");
        } else {
            Autores autores = autorBD.orElseGet(() -> {
                Autores nuevoAutor = new Autores(autorAPI);
                repository.save(nuevoAutor);
                return nuevoAutor;
            });

            autores.setLibros(libroEncontrado);
            repository.save(autores);
            System.out.println("Libro y autor guardados exitosamente.");
        }
    }

    public void buscarAutorPorNombre() {
        System.out.println("""
            -------------------------------
             üìô BUSCAR AUTOR POR NOMBRE üìô
            -------------------------------
            """);
        System.out.println("Ingrese el nombre del autor a buscar:");
        var nombre = teclado.nextLine();
        Optional<Autores> autores = repository.buscarAutorPorNombre(nombre);

        if (autores.isPresent()) {
            mostrarInformacionAutor(autores.get());
        } else {
            System.out.println("""
                -------------------------------
                ‚ùå Autor no encontrado
                -------------------------------
                """);
        }
    }

    private void mostrarInformacionAutor(Autores autor) {
        String libros = autor.getLibros().stream()
                .map(Libro::getTitulo)
                .collect(Collectors.joining(", "));

        System.out.println("""
            -------------------------------
            üìò Autor Encontrado üìò
            -------------------------------
            Nombre: %s
            Fecha de Nacimiento: %s
            Fecha de Fallecimiento: %s
            Libros: %s
            -------------------------------
            """.formatted(autor.getNombre(),
                        autor.getNacimiento(),
                        autor.getFallecimiento(),
                        libros.isEmpty() ? "Ninguno" : libros));
    }

    public void listarLibrosRegistrados() {
        List<Libro> libros = repository.buscarTodosLosLibros();

        if (libros.isEmpty()) {
            System.out.println("""
                -------------------------------
                ‚ùå No hay libros registrados
                -------------------------------
                """);
            return;
        }

        libros.forEach(this::mostrarInformacionLibro);
    }

    private void mostrarInformacionLibro(Libro libro) {
        System.out.println("""
            -------------------------------
            üìö Libro Registrado üìö
            -------------------------------
            T√≠tulo: %s
            Autor: %s
            Idioma: %s
            N√∫mero de descargas: %d
            -------------------------------
            """.formatted(libro.getTitulo(),
                libro.getAutores().getNombre(),
                libro.getIdioma().getIdioma(),
                libro.getDescargas()));
    }

    public void listarAutoresRegistrados() {
        System.out.println("""
            ----------------------------------
             üìó LISTAR AUTORES REGISTRADOS üìó
            ----------------------------------
            """);
        List<Autores> autores = repository.findAll();

        if (autores.isEmpty()) {
            System.out.println("""
                ----------------------------------
                ‚ùå No hay autores registrados
                ----------------------------------
                """);
            return;
        }

        autores.forEach(this::mostrarInformacionAutor);
    }

    public void listarAutoresVivos() {
        System.out.println("""
            -----------------------------
              üìí LISTAR AUTORES VIVOS üìí
            -----------------------------
            """);
        System.out.println("Introduzca un a√±o para verificar el autor(es) que desea buscar:");

        try {
            var fecha = Integer.valueOf(teclado.nextLine());
            List<Autores> autores = repository.buscarAutoresVivos(fecha);

            if (autores.isEmpty()) {
                System.out.println("""
                    ------------------------------------
                    ‚ùå No hay autores vivos en el a√±o registrado
                    ------------------------------------
                    """);
            } else {
                autores.forEach(this::mostrarInformacionAutorVivo);
            }
        } catch (NumberFormatException e) {
            System.out.println("Ingresa un a√±o v√°lido: " + e.getMessage());
        }
    }

    private void mostrarInformacionAutorVivo(Autores autor) {
        String libros = autor.getLibros().stream()
                .map(Libro::getTitulo)
                .collect(Collectors.joining(", "));

        System.out.println("""
            ----------------------------------
             üìò Autor Vivo üìò
            ----------------------------------
            Nombre: %s
            Fecha de Nacimiento: %s
            Fecha de Fallecimiento: %s
            Libros: %s
            ----------------------------------
            """.formatted(autor.getNombre(),
                autor.getNacimiento(),
                autor.getFallecimiento() != null ? autor.getFallecimiento() : "N/A",
                libros.isEmpty() ? "Ninguno" : libros));
    }

    public void listarLibrosPorIdioma() {
        System.out.println("""
            --------------------------------
             üìò LISTAR LIBROS POR IDIOMA üìò
            --------------------------------
            """);
        var menu = """
            ---------------------------------------------------
            Seleccione el idioma del libro que desea encontrar:
            ---------------------------------------------------
            1 - Espa√±ol
            2 - Franc√©s
            3 - Ingl√©s
            4 - Portugu√©s
            ----------------------------------------------------
            """;
        System.out.println(menu);

        try {
            var opcion = Integer.parseInt(teclado.nextLine());

            switch (opcion) {
                case 1 -> buscarLibrosPorIdioma("es");
                case 2 -> buscarLibrosPorIdioma("fr");
                case 3 -> buscarLibrosPorIdioma("en");
                case 4 -> buscarLibrosPorIdioma("pt");
                default -> System.out.println("Opci√≥n inv√°lida!");
            }
        } catch (NumberFormatException e) {
            System.out.println("Opci√≥n no v√°lida: " + e.getMessage());
        }
    }

    private void buscarLibrosPorIdioma(String idioma) {
        try {
            Idioma idiomaEnum = Idioma.valueOf(idioma.toUpperCase());
            List<Libro> libros = repository.buscarLibrosPorIdioma(idiomaEnum);
            if (libros.isEmpty()) {
                System.out.println("""
                    ------------------------------------------------
                    ‚ùå No hay libros registrados en ese idioma
                    ------------------------------------------------
                    """);
            } else {
                libros.forEach(this::mostrarInformacionLibro);
            }
        } catch (IllegalArgumentException e) {
            System.out.println("Introduce un idioma v√°lido en el formato especificado.");
        }
    }

    public void listarAutoresPorAnio () {
        System.out.println("""
                    ------------------------------
                     üìì LISTAR AUTORES POR A√ëO üìì
                    ------------------------------
                     """);
        var menu = """
                    ------------------------------------------
                    Ingresa una opci√≥n para listar los autores
                    -------------------------------------------
                    1 - Listar autor por A√±o de Nacimiento
                    2 - Listar autor por a√±o de Fallecimiento
                    -------------------------------------------
                    """;
        System.out.println(menu);
        try {
            var opcion = Integer.valueOf(teclado.nextLine());
            switch (opcion) {
                case 1:
                    ListarAutoresPorNacimiento();
                    break;
                case 2:
                    ListarAutoresPorFallecimiento();
                    break;
                default:
                    System.out.println("Opci√≥n inv√°lida!");
                    break;
            }
        } catch (NumberFormatException e) {
            System.out.println("Opci√≥n no v√°lida: " + e.getMessage());
        }
    }

    public void ListarAutoresPorNacimiento () {
        System.out.println("""
                    ---------------------------------------------
                     üìñ BUSCAR AUTOR POR SU A√ëO DE NACIMIENTO üìñ
                    ---------------------------------------------
                    """);
        System.out.println("Introduzca el a√±o de nacimiento del autor que desea buscar:");
        try {
            var nacimiento = Integer.valueOf(teclado.nextLine());
            List<Autores> autores = repository.listarAutoresPorNacimiento(nacimiento);
            if (autores.isEmpty()) {
                System.out.println("No existen autores con a√±o de nacimiento igual a " + nacimiento);
            } else {
                System.out.println();
                autores.forEach(a -> System.out.println(
                        "Autor: " + a.getNombre() +
                                "\nFecha de Nacimiento: " + a.getNacimiento() +
                                "\nFecha de Fallecimiento: " + a.getFallecimiento() +
                                "\nLibros: " + a.getLibros().stream().map(l -> l.getTitulo()).collect(Collectors.toList()) + "\n"
                ));
            }
        } catch (NumberFormatException e) {
            System.out.println("A√±o no v√°lido: " + e.getMessage());
        }
    }

    public void ListarAutoresPorFallecimiento () {
        System.out.println("""
                    ---------------------------------------------------------
                     üìñ  BUSCAR LIBROS POR A√ëO DE FALLECIMIENTO DEL AUTOR üìñ
                    ----------------------------------------------------------
                     """);
        System.out.println("Introduzca el a√±o de fallecimiento del autor que desea buscar:");
        try {
            var fallecimiento = Integer.valueOf(teclado.nextLine());
            List<Autores> autores = repository.listarAutoresPorFallecimiento(fallecimiento);
            if (autores.isEmpty()) {
                System.out.println("No existen autores con a√±o de fallecimiento igual a " + fallecimiento);
            } else {
                System.out.println();
                autores.forEach(a -> System.out.println(
                        "Autor: " + a.getNombre() +
                                "\nFecha de Nacimiento: " + a.getNacimiento() +
                                "\nFecha de Fallecimeinto: " + a.getFallecimiento() +
                                "\nLibros: " + a.getLibros().stream().map(l -> l.getTitulo()).collect(Collectors.toList()) + "\n"
                ));
            }
        } catch (NumberFormatException e) {
            System.out.println("Opci√≥n no v√°lida: " + e.getMessage());
        }
    }

    public void top10Libros() {
        System.out.println("""
        -------------------------------------
           üìö TOP 10 LIBROS M√ÅS BUSCADOS üìö
        -------------------------------------
        """);
        List<Libro> libros = repository.top10Libros();
        System.out.println();
        libros.forEach(l -> System.out.println("""
        ----------------- LIBRO üìö ----------------
        T√≠tulo: %s
        Autor: %s
        Idioma: %s
        N√∫mero de descargas: %d
        -------------------------------------------
        """.formatted(l.getTitulo(), l.getAutores().getNombre(), l.getIdioma().getIdioma(), l.getDescargas())));
    }

    public void generarEstadisticas() {
        System.out.println("""
        ----------------------------
         üìä GENERAR ESTAD√çSTICAS üìä
        ----------------------------
        """);

        var json = consumoAPI.obtenerDatos(URL_BASE);
        var datos = convierteDatos.obtenerDatos(json, Datos.class);

        IntSummaryStatistics est = datos.libros().stream()
                .filter(l -> l.descargas() > 0)
                .collect(Collectors.summarizingInt(DatosLibro::descargas));

        Integer media = (int) est.getAverage();

        System.out.println("""
        --------- ESTAD√çSTICAS \uD83D\uDCCA ------------
        Media de descargas: %d
        M√°xima de descargas: %d
        M√≠nima de descargas: %d
        Total registros para calcular las estad√≠sticas: %d
        ---------------------------------------------------
        """.formatted(media, est.getMax(), est.getMin(), est.getCount()));
    }
}
